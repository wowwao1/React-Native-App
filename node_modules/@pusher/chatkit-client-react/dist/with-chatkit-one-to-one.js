"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withChatkitOneToOne = withChatkitOneToOne;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _context = require("./context");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Wraps the given component and injects everything needed to create
 * one-to-one chat experinces under props.chatkit:
 *
 * @param {React.Component} WrappedComponent - Custom React component you would
 *      like to inject the Chatkit data into
 * @return {React.Component} A wrapped version of your component with the Chatkit
 *      SDK injected under props.chatkit
 *
 * @example
 * const MyChatComponent = props => {
 *    // Base Chatkit SDK
 *    props.chatkit.currentUser // Reference to the CurrentUser object
 *    props.chatkit.chatManager // Reference to the ChatManager object
 *
 *    // One-to-one chat data
 *    props.chatkit.otherUser // Reference to a Chatkit.User object for the other user in the chat
 *    props.chatkit.messages // An array of all the messages in the room
 *    props.chatkit.isLoading // True when the room is fully loaded, false otherwise
 *    props.chatkit.sendSimpleMessage // Method which sends a text-only message to the room
 *    props.chatkit.sendMultipartMessage // Method which sends a multi-part Chatkit message to the room
 *    props.chatkit.sendTypingEvent // Method which triggers a typing event for the current user in the current room
 *    props.chatkit.setReadCursor // Method which sets the current user's read cursor to the latest message
 * }
 */
function withChatkitOneToOne(WrappedComponent) {
  var WithChatkitOneToOne =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(WithChatkitOneToOne, _React$Component);

    function WithChatkitOneToOne(props) {
      var _this;

      _classCallCheck(this, WithChatkitOneToOne);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithChatkitOneToOne).call(this, props));

      if (!props.otherUserId) {
        throw new Error("otherUserId prop is required");
      }

      _this.state = {
        otherUser: null,
        otherUserIsTyping: false,
        otherUserLastReadMessageId: undefined,
        messages: [],
        isLoading: true
      };
      _this._currentUserId = null;
      _this._otherUserId = props.otherUserId;
      _this._roomId = null;
      _this._currentUserLastReadMessageId = null;
      return _this;
    }

    _createClass(WithChatkitOneToOne, [{
      key: "_sendSimpleMessage",
      value: function _sendSimpleMessage(_ref) {
        var text = _ref.text;
        return this.context.chatkit.currentUser.sendSimpleMessage({
          roomId: this._roomId,
          text: text
        });
      }
    }, {
      key: "_sendMultipartMessage",
      value: function _sendMultipartMessage(_ref2) {
        var parts = _ref2.parts;
        return this.context.chatkit.currentUser.sendMultipartMessage({
          roomId: this._roomId,
          parts: parts
        });
      }
    }, {
      key: "_sendTypingEvent",
      value: function _sendTypingEvent() {
        return this.context.chatkit.currentUser.isTypingIn({
          roomId: this._roomId
        });
      }
    }, {
      key: "_setReadCursor",
      value: function _setReadCursor() {
        if (this.state.messages.length === 0) {
          return;
        }

        var lastMessage = this.state.messages[this.state.messages.length - 1];

        if (lastMessage.id === this._currentUserLastReadMessageId) {
          return;
        }

        this._currentUserLastReadMessageId = lastMessage.id;
        return this.context.chatkit.currentUser.setReadCursor({
          roomId: this._roomId,
          position: lastMessage.id
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.context.addOnLoadListener(function () {
          _this2._currentUserId = _this2.context.chatkit.currentUser.id;
          _this2._roomId = (0, _utils.makeOneToOneRoomId)(_this2._currentUserId, _this2._otherUserId);

          var alreadyInRoom = _this2.context.chatkit.currentUser.rooms.some(function (r) {
            return r.id === _this2._roomId;
          });

          (alreadyInRoom ? Promise.resolve() : _this2.context.chatkit.currentUser.serverInstanceV6.request({
            method: "post",
            path: "/one_to_one_rooms",
            json: {
              user_id: _this2._otherUserId
            }
          })).then(function () {
            return _this2.context.chatkit.currentUser.subscribeToRoomMultipart({
              roomId: _this2._roomId,
              hooks: {
                onMessage: function onMessage(message) {
                  return _this2.setState(function (state) {
                    return {
                      messages: [].concat(_toConsumableArray(state.messages), [message])
                    };
                  });
                },
                onPresenceChanged: function onPresenceChanged(state, user) {
                  if (user.id === _this2.props.otherUserId) {
                    _this2.forceUpdate();
                  }
                },
                onUserStartedTyping: function onUserStartedTyping(user) {
                  if (user.id === _this2._otherUserId) {
                    _this2.setState({
                      otherUserIsTyping: true
                    });
                  }
                },
                onUserStoppedTyping: function onUserStoppedTyping(user) {
                  if (user.id === _this2._otherUserId) {
                    _this2.setState({
                      otherUserIsTyping: false
                    });
                  }
                },
                onNewReadCursor: function onNewReadCursor(cursor) {
                  var cursorBelongsToOtherUser = cursor.user.id === _this2._otherUserId;

                  if (cursorBelongsToOtherUser) {
                    _this2.setState({
                      otherUserLastReadMessageId: cursor.position
                    });
                  }
                }
              }
            });
          }).then(function (room) {
            return _this2.setState({
              otherUser: room.users.find(function (u) {
                return u.id === _this2._otherUserId;
              }),
              otherUserLastReadMessageId: _this2.context.chatkit.currentUser.readCursor({
                userId: _this2._otherUserId,
                roomId: _this2._roomId
              }),
              isLoading: false
            });
          })["catch"](function (err) {
            return console.error(err);
          });
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        // NOTE: At some point, if customers find them useful, we may want to
        // add these properties to the JS SDK itself. We are adding them here
        // for now as a cheap way to experiment.
        var otherUser = null;

        if (this.state.otherUser !== null) {
          otherUser = Object.create(this.state.otherUser);
          otherUser.isTyping = this.state.otherUserIsTyping;
          otherUser.lastReadMessageId = this.state.otherUserLastReadMessageId;
        } // We don't want to forward configuration props to the wrapped component


        var forwardedProps = _objectSpread({}, this.props);

        delete forwardedProps.otherUserId;
        return _react["default"].createElement(WrappedComponent, _extends({
          chatkit: _objectSpread({}, this.context.chatkit, {
            otherUser: otherUser,
            messages: this.state.messages,
            isLoading: this.state.isLoading,
            sendSimpleMessage: function sendSimpleMessage(options) {
              return _this3._sendSimpleMessage(options);
            },
            sendMultipartMessage: function sendMultipartMessage(options) {
              return _this3._sendMultipartMessage(options);
            },
            sendTypingEvent: function sendTypingEvent(options) {
              return _this3._sendTypingEvent(options);
            },
            setReadCursor: function setReadCursor(options) {
              return _this3._setReadCursor(options);
            }
          })
        }, forwardedProps));
      }
    }]);

    return WithChatkitOneToOne;
  }(_react["default"].Component);

  WithChatkitOneToOne.contextType = _context.ChatkitContext;
  WithChatkitOneToOne.displayName = "WithChatkitOneToOne(".concat((0, _utils.getDisplayName)(WrappedComponent), ")");
  WithChatkitOneToOne.propTypes = {
    otherUserId: _propTypes["default"].string.isRequired
  };
  return WithChatkitOneToOne;
}